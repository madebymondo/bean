permalink: getting-started
meta:
  title: Getting Started | Bean
  description: Bean allows you build high performant and high quality websites
    in a simple yet extremely customizable system.
  keywords: Static site generator, Website, TypeScript, HTML, CSS, JavaScript
modules:
  - type: spacer
    size: sm

  - type: single-column
    id: system-requirements
    headline: System Requirements
    content: |
      - [Node.js 17.0.0](https://nodejs.org/en) (Bean utilizes ESM)

  - type: spacer
    size: sm

  - type: single-column
    id: new-project-with-cli
    headline: Creating a new project with the CLI
    content: |
      New projects can be created using `create-bean` which
      will scaffold a new Bean site with our recommended folder
      structure. Follow the prompts to opt-in to features such as
      SASS and TypeScript.

  - type: spacer
    size: xs

  - type: code-block
    language: bash
    variant: fit
    code: |
      npm init bean-site path-to-directory

  - type: spacer
    size: sm

  - type: single-column
    id: start-from-scratch
    headline: Starting a new project from scratch
    content: |
      If you want to start a new project from scratch
      you will need to install the following packages.

  - type: spacer
    size: xs

  - type: code-block
    language: bash
    variant: fit
    code: |
      npm i -D @bean/core express nodemon nunjucks fs-extra ts-node

  - type: spacer
    size: xs

  - type: single-column
    headline: Create package.json
    content: |
      Add the following scripts to the `package.json`
      - `bean dev` - Runs development server
      - `bean build` - Builds the site according to the config file.
        For more information read about [configuration](/configuration)
        and [render modes](/render-modes).
      - `bean start` - Used in a production enviroment. This is only needed
        if the `server` render mode is used.
    options:
      - heading-small

  - type: spacer
    size: xs

  - type: code-block
    options:
      - full
    language: json
    filename: package.json
    code: |
      {
        "scripts": {
          "start": "bean start",
          "dev": "bean dev",
          "build": "bean build",
        }
      }

  - type: spacer
    size: xs

  - type: single-column
    headline: Create the configuration file
    content: |
      Create a `bean.config.ts` file in the project root.
      The example below is a basic configuration. You can
      [learn more about configuration options here](/configuration).
    options:
      - heading-small

  - type: spacer
    size: xs

  - type: code-block
    options:
      - full
    language: typescript
    filename: bean.config.ts
    code: |
      import { BeanConfig } from "@bean/core";
      import {marked} from 'marked';

      export default function config(): BeanConfig {
        return {
          baseDirectory: "src",
          // The pagesDirectory & viewsDirectory
          // are relative to the baseDirectory
          pagesDirectory: "pages",
          viewsDirectory: "views",
          // This is an example of creating 
          // a custom markdown filter
          templateFilters: [markdownFilter],
        };
      }

      function markdownFilter(engine) {
        engine.addFilter("md", (value) => {
          if (!value) return;

          return marked.parse(value.trim());
        });
      }

  - type: spacer
    size: xs

  - type: single-column
    headline: Create pages and views
    content: |
      The `viewsDirectory` contains all template files. By default
      Bean has as built-in integration with nunjucks. The `pagesDirectory`
      contain `typescript` files used to pass data to the
      templates. Both directories are realtive to the `baseDirectory` specified
      in the configuration file above. You can read more about [configuring the 
      pages directory here](/creating-pages).
    options:
      - heading-small

  - type: spacer
    size: xs

  - type: code-block
    options:
      - full
    language: liquid
    filename: src/views/base.njk
    code: |
      <!doctype html>
      <html>
          <head>
              <meta charset="UTF-8">
              <title>Bean Demo</title>
          </head>

          <body>
              <h1>{{title}}</h1>
              <p>This is the {{title}} content.</p>
          </body>
      </html>

  - type: spacer
    size: xs

  - type: code-block
    options:
      - full
    language: typescript
    filename: src/pages/[slug].ts
    code: |
      import { CreatePageParams } from "@bean/core";

      /* Mock pages data */
      const pages = [
        { slug: "/", title: "Homepage" },
       ];

      export function createPage(ctx): CreatePageParams {
        const slug = ctx.params.slug;
        return {
          context: {
            slug,
            template: "base.njk",
            /* Data that will be passed to template.
            This can come from any data source
            (example: CMS, YAML, JSON). */
            data: pages.find((page) => {
              let pageSlug = slug ? slug : "/";
              return pageSlug === page.slug;
            }),
          },
        };
      }

      /* Only used for SSG, not needed if 
      you are using the server render mode */
      export function createPaths() {
        const paths = pages.map((page) => {
          return {
            slug: page.slug,
          };
        });

        return {
          paths,
        };
      }

  - type: spacer
    size: xs

  - type: code-block
    options:
      - full
    language: liquid
    filename: Generated index.html
    code: |
      <!doctype html>
      <html>
          <head>
              <meta charset="UTF-8">
              <title>Bean Demo</title>
          </head>

          <body>
              <h1>Homepage</h1>
              <p>This is the Homepage content.</p>
          </body>
      </html>

  - type: spacer
    size: sm

  - type: single-column
    headline: Run the development server
    content: |
      Now that you're all set up. Run `npm run dev`
      and begin building you next big project!

  - type: spacer
